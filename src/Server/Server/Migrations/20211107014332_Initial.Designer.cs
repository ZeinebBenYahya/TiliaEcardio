// <auto-generated />
using System;
using Domain.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Server.Migrations
{
    [DbContext(typeof(TiliaDbContext))]
    [Migration("20211107014332_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Domain.Employees.SanitaryRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sanitary_roles");

                    b.ToTable("sanitary_roles");
                });

            modelBuilder.Entity("Domain.Locations.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("department_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("department_id");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("department_id")
                        .HasDatabaseName("ix_city_department_id");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Domain.Locations.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_department");

                    b.ToTable("department");
                });

            modelBuilder.Entity("Domain.People.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("CityId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city_id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<int>("Genre")
                        .HasColumnType("int")
                        .HasColumnName("genre");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_people_city_id");

                    b.ToTable("people");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Domain.Users.AccessRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_access_roles");

                    b.ToTable("access_roles");
                });

            modelBuilder.Entity("Domain.Users.Privilege", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("access_role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_privileges");

                    b.HasIndex("AccessRoleId")
                        .HasDatabaseName("ix_privileges_access_role_id");

                    b.ToTable("privileges");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<Guid?>("access_role_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("access_role_id");

                    b.Property<string>("employee_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_name");

                    b.HasIndex("access_role_id")
                        .HasDatabaseName("ix_users_access_role_id");

                    b.HasIndex("employee_id")
                        .HasDatabaseName("ix_users_employee_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Domain.Employees.Employee", b =>
                {
                    b.HasBaseType("Domain.People.Person");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Domain.Employees.SanitaryEmployee", b =>
                {
                    b.HasBaseType("Domain.Employees.Employee");

                    b.Property<Guid?>("SanitaryRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sanitary_role_id");

                    b.HasIndex("SanitaryRoleId")
                        .HasDatabaseName("ix_people_sanitary_role_id");

                    b.HasDiscriminator().HasValue("SanitaryEmployee");
                });

            modelBuilder.Entity("Domain.Locations.City", b =>
                {
                    b.HasOne("Domain.Locations.Department", "Department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .HasConstraintName("fk_city_department_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.People.Person", b =>
                {
                    b.HasOne("Domain.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_people_city_city_id");

                    b.OwnsOne("Domain.People.IdType", "IdType", b1 =>
                        {
                            b1.Property<string>("PersonId")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext")
                                .HasColumnName("id_type_name");

                            b1.HasKey("PersonId")
                                .HasName("pk_people");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.OwnsOne("Domain.People.PersonName", "Names", b1 =>
                        {
                            b1.Property<string>("PersonId")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .HasColumnType("longtext")
                                .HasColumnName("names_first_name");

                            b1.Property<string>("LastName")
                                .HasColumnType("longtext")
                                .HasColumnName("names_last_name");

                            b1.HasKey("PersonId")
                                .HasName("pk_people");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.Navigation("City");

                    b.Navigation("IdType");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("Domain.Users.Privilege", b =>
                {
                    b.HasOne("Domain.Users.AccessRole", null)
                        .WithMany("Privileges")
                        .HasForeignKey("AccessRoleId")
                        .HasConstraintName("fk_privileges_access_roles_access_role_id");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Users.AccessRole", "AccessRole")
                        .WithMany()
                        .HasForeignKey("access_role_id")
                        .HasConstraintName("fk_users_access_roles_access_role_id");

                    b.HasOne("Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employee_id")
                        .HasConstraintName("fk_users_people_employee_id");

                    b.OwnsOne("Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("char(36)")
                                .HasColumnName("id");

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("AccessRole");

                    b.Navigation("Email");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Employees.SanitaryEmployee", b =>
                {
                    b.HasOne("Domain.Employees.SanitaryRole", "SanitaryRole")
                        .WithMany()
                        .HasForeignKey("SanitaryRoleId")
                        .HasConstraintName("fk_people_sanitary_roles_sanitary_role_id");

                    b.Navigation("SanitaryRole");
                });

            modelBuilder.Entity("Domain.Users.AccessRole", b =>
                {
                    b.Navigation("Privileges");
                });
#pragma warning restore 612, 618
        }
    }
}
