// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedLib.Persistence;

namespace Server.Migrations
{
    [DbContext(typeof(TiliaDbContext))]
    partial class TiliaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Domain.Employees.SanitaryRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sanitary_roles");

                    b.ToTable("sanitary_roles");
                });

            modelBuilder.Entity("Domain.Locations.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("department_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("department_id");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("department_id")
                        .HasDatabaseName("ix_cities_department_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Domain.Locations.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Domain.MedicalFiles.Background.GynecologicalBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("Cycle")
                        .HasColumnType("int")
                        .HasColumnName("cycle");

                    b.Property<DateTime>("EstimatedDateConfinement")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("estimated_date_confinement");

                    b.Property<bool>("HasAmenorrhea")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_amenorrhea");

                    b.Property<bool>("HasDysmenorrhea")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_dysmenorrhea");

                    b.Property<bool>("HasPlanning")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_planning");

                    b.Property<bool>("IsRegular")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_regular");

                    b.Property<DateTime>("LastMenstrualPeriod")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_menstrual_period");

                    b.Property<DateTime>("Menarchy")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("menarchy");

                    b.Property<string>("Method")
                        .HasColumnType("longtext")
                        .HasColumnName("method");

                    b.HasKey("Id")
                        .HasName("pk_gynecological_backgrounds");

                    b.ToTable("gynecological_backgrounds");
                });

            modelBuilder.Entity("Domain.MedicalFiles.Background.MedicalBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("MedicalAppointmentAppointmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("medical_appointment_appointment_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Observations")
                        .HasColumnType("longtext")
                        .HasColumnName("observations");

                    b.Property<bool>("State")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_medical_backgrounds");

                    b.HasIndex("MedicalAppointmentAppointmentId")
                        .HasDatabaseName("ix_medical_backgrounds_medical_appointment_appointment_id");

                    b.ToTable("medical_backgrounds");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalAppointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("appointment_date");

                    b.Property<string>("AppointmentReason")
                        .HasColumnType("longtext")
                        .HasColumnName("appointment_reason");

                    b.Property<int>("AptitudeCertificate")
                        .HasColumnType("int")
                        .HasColumnName("aptitude_certificate");

                    b.Property<string>("DiseaseHistory")
                        .HasColumnType("longtext")
                        .HasColumnName("disease_history");

                    b.Property<string>("doctor_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("doctor_id");

                    b.Property<Guid?>("gynecological_background_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("gynecological_background_id");

                    b.Property<Guid?>("medical_note_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("medical_note_id");

                    b.Property<Guid?>("medical_record_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("medical_record_id");

                    b.Property<string>("patient_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("patient_id");

                    b.Property<string>("scheduler_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("scheduler_id");

                    b.HasKey("AppointmentId")
                        .HasName("pk_medical_appointments");

                    b.HasIndex("doctor_id")
                        .HasDatabaseName("ix_medical_appointments_doctor_id");

                    b.HasIndex("gynecological_background_id")
                        .HasDatabaseName("ix_medical_appointments_gynecological_background_id");

                    b.HasIndex("medical_note_id")
                        .HasDatabaseName("ix_medical_appointments_medical_note_id");

                    b.HasIndex("medical_record_id")
                        .HasDatabaseName("ix_medical_appointments_medical_record_id");

                    b.HasIndex("patient_id")
                        .HasDatabaseName("ix_medical_appointments_patient_id");

                    b.HasIndex("scheduler_id")
                        .HasDatabaseName("ix_medical_appointments_scheduler_id");

                    b.ToTable("medical_appointments");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CIE10")
                        .HasColumnType("longtext")
                        .HasColumnName("cie10");

                    b.Property<string>("Functional")
                        .HasColumnType("longtext")
                        .HasColumnName("functional");

                    b.Property<Guid?>("MedicalNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("medical_note_id");

                    b.HasKey("Id")
                        .HasName("pk_diagnostics");

                    b.HasIndex("MedicalNoteId")
                        .HasDatabaseName("ix_diagnostics_medical_note_id");

                    b.ToTable("diagnostics");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.EvolutionSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_evolution_sheets");

                    b.ToTable("evolution_sheets");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.ManagementPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_management_plans");

                    b.ToTable("management_plans");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.MedicalNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("evolution_sheet_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("evolution_sheet_id");

                    b.Property<Guid?>("management_plan_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("management_plan_id");

                    b.HasKey("Id")
                        .HasName("pk_medical_notes");

                    b.HasIndex("evolution_sheet_id")
                        .HasDatabaseName("ix_medical_notes_evolution_sheet_id");

                    b.HasIndex("management_plan_id")
                        .HasDatabaseName("ix_medical_notes_management_plan_id");

                    b.ToTable("medical_notes");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.Referral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Department")
                        .HasColumnType("longtext")
                        .HasColumnName("department");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("MedicalNoteId")
                        .HasColumnType("char(36)")
                        .HasColumnName("medical_note_id");

                    b.HasKey("Id")
                        .HasName("pk_referrals");

                    b.HasIndex("MedicalNoteId")
                        .HasDatabaseName("ix_referrals_medical_note_id");

                    b.ToTable("referrals");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.BodyPartRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Observations")
                        .HasColumnType("longtext")
                        .HasColumnName("observations");

                    b.Property<Guid?>("PhysicalExamId")
                        .HasColumnType("char(36)")
                        .HasColumnName("physical_exam_id");

                    b.Property<string>("Region")
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext")
                        .HasColumnName("segment");

                    b.HasKey("Id")
                        .HasName("pk_body_part_records");

                    b.HasIndex("PhysicalExamId")
                        .HasDatabaseName("ix_body_part_records_physical_exam_id");

                    b.ToTable("body_part_records");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("physical_exam_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("physical_exam_id");

                    b.HasKey("Id")
                        .HasName("pk_medical_records");

                    b.HasIndex("physical_exam_id")
                        .HasDatabaseName("ix_medical_records_physical_exam_id");

                    b.ToTable("medical_records");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.PhysicalExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_physical_exams");

                    b.ToTable("physical_exams");
                });

            modelBuilder.Entity("Domain.People.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("CityId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city_id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<int>("Genre")
                        .HasColumnType("int")
                        .HasColumnName("genre");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_people_city_id");

                    b.ToTable("people");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Domain.Users.AccessRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_access_roles");

                    b.ToTable("access_roles");
                });

            modelBuilder.Entity("Domain.Users.Privilege", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccessRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("access_role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_privileges");

                    b.HasIndex("AccessRoleId")
                        .HasDatabaseName("ix_privileges_access_role_id");

                    b.ToTable("privileges");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<Guid?>("access_role_id")
                        .HasColumnType("char(36)")
                        .HasColumnName("access_role_id");

                    b.Property<string>("employee_id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_name");

                    b.HasIndex("access_role_id")
                        .HasDatabaseName("ix_users_access_role_id");

                    b.HasIndex("employee_id")
                        .HasDatabaseName("ix_users_employee_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Domain.Employees.Employee", b =>
                {
                    b.HasBaseType("Domain.People.Person");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Domain.Patients.Patient", b =>
                {
                    b.HasBaseType("Domain.People.Person");

                    b.Property<string>("Occupation")
                        .HasColumnType("longtext")
                        .HasColumnName("occupation");

                    b.Property<string>("Studies")
                        .HasColumnType("longtext")
                        .HasColumnName("studies");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Domain.Employees.SanitaryEmployee", b =>
                {
                    b.HasBaseType("Domain.Employees.Employee");

                    b.Property<Guid?>("SanitaryRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sanitary_role_id");

                    b.HasIndex("SanitaryRoleId")
                        .HasDatabaseName("ix_people_sanitary_role_id");

                    b.HasDiscriminator().HasValue("SanitaryEmployee");
                });

            modelBuilder.Entity("Domain.Locations.City", b =>
                {
                    b.HasOne("Domain.Locations.Department", "Department")
                        .WithMany()
                        .HasForeignKey("department_id")
                        .HasConstraintName("fk_cities_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.MedicalFiles.Background.MedicalBackground", b =>
                {
                    b.HasOne("Domain.MedicalFiles.MedicalAppointment", null)
                        .WithMany("MedicalBackgrounds")
                        .HasForeignKey("MedicalAppointmentAppointmentId")
                        .HasConstraintName("fk_medical_backgrounds_medical_appointments_medical_appointment");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalAppointment", b =>
                {
                    b.HasOne("Domain.Employees.SanitaryEmployee", "DoctorCaring")
                        .WithMany()
                        .HasForeignKey("doctor_id")
                        .HasConstraintName("fk_medical_appointments_people_doctor_id");

                    b.HasOne("Domain.MedicalFiles.Background.GynecologicalBackground", "GynecologicalBackground")
                        .WithMany()
                        .HasForeignKey("gynecological_background_id")
                        .HasConstraintName("fk_medical_appointments_gynecological_backgrounds_gynecological");

                    b.HasOne("Domain.MedicalFiles.MedicalNotes.MedicalNote", "MedicalNote")
                        .WithMany()
                        .HasForeignKey("medical_note_id")
                        .HasConstraintName("fk_medical_appointments_medical_notes_medical_note_id");

                    b.HasOne("Domain.MedicalFiles.MedicalRecords.MedicalRecord", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("medical_record_id")
                        .HasConstraintName("fk_medical_appointments_medical_records_medical_record_id");

                    b.HasOne("Domain.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("patient_id")
                        .HasConstraintName("fk_medical_appointments_people_patient_id");

                    b.HasOne("Domain.Employees.Employee", "Scheduler")
                        .WithMany()
                        .HasForeignKey("scheduler_id")
                        .HasConstraintName("fk_medical_appointments_people_scheduler_id");

                    b.Navigation("DoctorCaring");

                    b.Navigation("GynecologicalBackground");

                    b.Navigation("MedicalNote");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");

                    b.Navigation("Scheduler");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.Diagnosis", b =>
                {
                    b.HasOne("Domain.MedicalFiles.MedicalNotes.MedicalNote", null)
                        .WithMany("Diagnostics")
                        .HasForeignKey("MedicalNoteId")
                        .HasConstraintName("fk_diagnostics_medical_notes_medical_note_id");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.MedicalNote", b =>
                {
                    b.HasOne("Domain.MedicalFiles.MedicalNotes.EvolutionSheet", "EvolutionSheet")
                        .WithMany()
                        .HasForeignKey("evolution_sheet_id")
                        .HasConstraintName("fk_medical_notes_evolution_sheets_evolution_sheet_id");

                    b.HasOne("Domain.MedicalFiles.MedicalNotes.ManagementPlan", "ManagementPlan")
                        .WithMany()
                        .HasForeignKey("management_plan_id")
                        .HasConstraintName("fk_medical_notes_management_plans_management_plan_id");

                    b.Navigation("EvolutionSheet");

                    b.Navigation("ManagementPlan");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.Referral", b =>
                {
                    b.HasOne("Domain.MedicalFiles.MedicalNotes.MedicalNote", null)
                        .WithMany("Referrals")
                        .HasForeignKey("MedicalNoteId")
                        .HasConstraintName("fk_referrals_medical_notes_medical_note_id");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.BodyPartRecord", b =>
                {
                    b.HasOne("Domain.MedicalFiles.MedicalRecords.PhysicalExam", null)
                        .WithMany("BodyPartRecords")
                        .HasForeignKey("PhysicalExamId")
                        .HasConstraintName("fk_body_part_records_physical_exams_physical_exam_id");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.MedicalRecord", b =>
                {
                    b.HasOne("Domain.MedicalFiles.MedicalRecords.PhysicalExam", "PhysicalExams")
                        .WithMany()
                        .HasForeignKey("physical_exam_id")
                        .HasConstraintName("fk_medical_records_physical_exams_physical_exam_id");

                    b.OwnsOne("Domain.MedicalFiles.MedicalRecords.Anamnesis", "Anamnesis", b1 =>
                        {
                            b1.Property<Guid>("MedicalRecordId")
                                .HasColumnType("char(36)")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext")
                                .HasColumnName("anamnesis_description");

                            b1.HasKey("MedicalRecordId")
                                .HasName("pk_medical_records");

                            b1.ToTable("medical_records");

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordId")
                                .HasConstraintName("fk_medical_records_medical_records_id");
                        });

                    b.Navigation("Anamnesis");

                    b.Navigation("PhysicalExams");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.PhysicalExam", b =>
                {
                    b.OwnsOne("Domain.MedicalFiles.MedicalRecords.VitalSign", "VitalSignResults", b1 =>
                        {
                            b1.Property<Guid>("PhysicalExamId")
                                .HasColumnType("char(36)")
                                .HasColumnName("id");

                            b1.Property<double>("Height")
                                .HasColumnType("double")
                                .HasColumnName("vital_sign_results_height");

                            b1.Property<double>("Temperature")
                                .HasColumnType("double")
                                .HasColumnName("vital_sign_results_temperature");

                            b1.Property<double>("Weight")
                                .HasColumnType("double")
                                .HasColumnName("vital_sign_results_weight");

                            b1.HasKey("PhysicalExamId")
                                .HasName("pk_physical_exams");

                            b1.ToTable("physical_exams");

                            b1.WithOwner()
                                .HasForeignKey("PhysicalExamId")
                                .HasConstraintName("fk_physical_exams_physical_exams_id");
                        });

                    b.Navigation("VitalSignResults");
                });

            modelBuilder.Entity("Domain.People.Person", b =>
                {
                    b.HasOne("Domain.Locations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_people_cities_city_id");

                    b.OwnsOne("Domain.People.IdType", "IdType", b1 =>
                        {
                            b1.Property<string>("PersonId")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext")
                                .HasColumnName("id_type_name");

                            b1.HasKey("PersonId")
                                .HasName("pk_people");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.OwnsOne("Domain.People.PersonName", "Names", b1 =>
                        {
                            b1.Property<string>("PersonId")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .HasColumnType("longtext")
                                .HasColumnName("names_first_name");

                            b1.Property<string>("LastName")
                                .HasColumnType("longtext")
                                .HasColumnName("names_last_name");

                            b1.HasKey("PersonId")
                                .HasName("pk_people");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("PersonId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.Navigation("City");

                    b.Navigation("IdType");

                    b.Navigation("Names");
                });

            modelBuilder.Entity("Domain.Users.Privilege", b =>
                {
                    b.HasOne("Domain.Users.AccessRole", null)
                        .WithMany("Privileges")
                        .HasForeignKey("AccessRoleId")
                        .HasConstraintName("fk_privileges_access_roles_access_role_id");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Users.AccessRole", "AccessRole")
                        .WithMany()
                        .HasForeignKey("access_role_id")
                        .HasConstraintName("fk_users_access_roles_access_role_id");

                    b.HasOne("Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employee_id")
                        .HasConstraintName("fk_users_people_employee_id");

                    b.OwnsOne("Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("char(36)")
                                .HasColumnName("id");

                            b1.HasKey("UserId")
                                .HasName("pk_users");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("AccessRole");

                    b.Navigation("Email");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Patients.Patient", b =>
                {
                    b.OwnsOne("Domain.Patients.ContactData", "ContactData", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .HasColumnType("longtext")
                                .HasColumnName("contact_data_address");

                            b1.Property<string>("Landline")
                                .HasColumnType("longtext")
                                .HasColumnName("contact_data_landline");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("longtext")
                                .HasColumnName("contact_data_phone_number");

                            b1.Property<int>("Stratum")
                                .HasColumnType("int")
                                .HasColumnName("contact_data_stratum");

                            b1.Property<string>("city_id")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("contact_data_city_id");

                            b1.HasKey("PatientId")
                                .HasName("pk_people");

                            b1.HasIndex("city_id")
                                .HasDatabaseName("ix_people_contact_data_city_id");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("PatientId")
                                .HasConstraintName("fk_people_people_id");

                            b1.HasOne("Domain.Locations.City", "City")
                                .WithMany()
                                .HasForeignKey("city_id")
                                .HasConstraintName("fk_people_cities_contact_data_city_id");

                            b1.Navigation("City");
                        });

                    b.OwnsOne("Domain.Patients.SportsData", "SportsData", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("id");

                            b1.Property<string>("Coach")
                                .HasColumnType("longtext")
                                .HasColumnName("sports_data_coach");

                            b1.Property<bool>("ContinuousTraining")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("sports_data_continuous_training");

                            b1.Property<int>("Dominance")
                                .HasColumnType("int")
                                .HasColumnName("sports_data_dominance");

                            b1.Property<string>("Modality")
                                .HasColumnType("longtext")
                                .HasColumnName("sports_data_modality");

                            b1.Property<string>("Sport")
                                .HasColumnType("longtext")
                                .HasColumnName("sports_data_sport");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("sports_data_start_date");

                            b1.Property<bool>("TrainingPlan")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("sports_data_training_plan");

                            b1.HasKey("PatientId")
                                .HasName("pk_people");

                            b1.ToTable("people");

                            b1.WithOwner()
                                .HasForeignKey("PatientId")
                                .HasConstraintName("fk_people_people_id");
                        });

                    b.Navigation("ContactData");

                    b.Navigation("SportsData");
                });

            modelBuilder.Entity("Domain.Employees.SanitaryEmployee", b =>
                {
                    b.HasOne("Domain.Employees.SanitaryRole", "SanitaryRole")
                        .WithMany()
                        .HasForeignKey("SanitaryRoleId")
                        .HasConstraintName("fk_people_sanitary_roles_sanitary_role_id");

                    b.Navigation("SanitaryRole");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalAppointment", b =>
                {
                    b.Navigation("MedicalBackgrounds");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalNotes.MedicalNote", b =>
                {
                    b.Navigation("Diagnostics");

                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("Domain.MedicalFiles.MedicalRecords.PhysicalExam", b =>
                {
                    b.Navigation("BodyPartRecords");
                });

            modelBuilder.Entity("Domain.Users.AccessRole", b =>
                {
                    b.Navigation("Privileges");
                });
#pragma warning restore 612, 618
        }
    }
}
